1.
a)
50
	20
		10
			XX
			15
		40
			30
				25
				35
			XX
	60
		XX
		70
			65
			80
				75
				XX

b)
in-order: 10 15 20 25 30 35 40 50 60 65 70 75 80
pre-order: 50 20 10 15 40 30 25 35 60 70 65 80 75
post-order: 15 10 25 35 30 40 20 65 75 80 70 60 50

c)
50
	25
		10
			XX
			15
		40
			35
			XX
	60
		XX
		70
			65
			80
				75
				XX

2.
a)
struct Node
{
	Node(int data)	
	{
		m_data = data;
		parent = left = right = nullptr;
	}
	int m_data;
	Node *parent, *left, *right;
};

b)
If root pointer is null
	Insert Node here
Else
	Repeatedly
		If value trying to insert equals value of Node
			Return
		Else if less
			If left Node is null
				Insert Node there
				Set that parent pointer to current Node
				Return
			Go into left Node
		Else if greater
			If right Node is null
				Insert Node here
				Set that parent pointer to current Node
				Return
			Go into right Node

3.
a)
8
	3
		0
		2
	6
		4
		X
		
b)
8 3 6 0 2 4

c)
6
	3
		0
		2
	4

4.
a) O(C + S)
b) O(logC + S)
c) O(logC + logS)
d) O(logS)
e) O(1)
f) O(logC + SlogS)
g) O(S^2)
h) O(C + logS)
